// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ConfigQueue config queue
// swagger:model ConfigQueue
type ConfigQueue struct {

	// The action FRB should perform on all items in the queue
	// Required: true
	// Enum: [MODIFY CODEOFF NOCHANGE]
	Action *string `json:"action"`

	// The time FRB should stop actioning the queue
	// Format: date-time
	EndTime strfmt.DateTime `json:"end_time,omitempty"`

	// The name of the queue that FRB needs to look at
	// Required: true
	Name *string `json:"name"`

	// The parameters to be used by FRB to perform an action
	Parameters []*ConfigParameter `json:"parameters"`

	// The time FRB should start actioning the queue
	// Format: date-time
	StartTime strfmt.DateTime `json:"start_time,omitempty"`
}

// Validate validates this config queue
func (m *ConfigQueue) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAction(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEndTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateParameters(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStartTime(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var configQueueTypeActionPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["MODIFY","CODEOFF","NOCHANGE"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		configQueueTypeActionPropEnum = append(configQueueTypeActionPropEnum, v)
	}
}

const (

	// ConfigQueueActionMODIFY captures enum value "MODIFY"
	ConfigQueueActionMODIFY string = "MODIFY"

	// ConfigQueueActionCODEOFF captures enum value "CODEOFF"
	ConfigQueueActionCODEOFF string = "CODEOFF"

	// ConfigQueueActionNOCHANGE captures enum value "NOCHANGE"
	ConfigQueueActionNOCHANGE string = "NOCHANGE"
)

// prop value enum
func (m *ConfigQueue) validateActionEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, configQueueTypeActionPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *ConfigQueue) validateAction(formats strfmt.Registry) error {

	if err := validate.Required("action", "body", m.Action); err != nil {
		return err
	}

	// value enum
	if err := m.validateActionEnum("action", "body", *m.Action); err != nil {
		return err
	}

	return nil
}

func (m *ConfigQueue) validateEndTime(formats strfmt.Registry) error {

	if swag.IsZero(m.EndTime) { // not required
		return nil
	}

	if err := validate.FormatOf("end_time", "body", "date-time", m.EndTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ConfigQueue) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *ConfigQueue) validateParameters(formats strfmt.Registry) error {

	if swag.IsZero(m.Parameters) { // not required
		return nil
	}

	for i := 0; i < len(m.Parameters); i++ {
		if swag.IsZero(m.Parameters[i]) { // not required
			continue
		}

		if m.Parameters[i] != nil {
			if err := m.Parameters[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("parameters" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ConfigQueue) validateStartTime(formats strfmt.Registry) error {

	if swag.IsZero(m.StartTime) { // not required
		return nil
	}

	if err := validate.FormatOf("start_time", "body", "date-time", m.StartTime.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ConfigQueue) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ConfigQueue) UnmarshalBinary(b []byte) error {
	var res ConfigQueue
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
